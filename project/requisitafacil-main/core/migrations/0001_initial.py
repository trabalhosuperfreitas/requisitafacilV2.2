# Generated by Django 5.2.3 on 2025-07-07 01:52

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Sector',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nome do Setor')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Setor',
                'verbose_name_plural': 'Setores',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('role', models.CharField(choices=[('Gestor', 'Gestor'), ('Encarregado', 'Encarregado'), ('Almoxarife', 'Almoxarife')], default='Almoxarife', max_length=20, verbose_name='Função')),
                ('is_active', models.BooleanField(default=True, verbose_name='Ativo')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('sector', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='core.sector', verbose_name='Setor')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('request_code', models.CharField(blank=True, max_length=20, null=True, unique=True, verbose_name='Código da Requisição')),
                ('urgency', models.CharField(choices=[('NORMAL', 'Normal'), ('URGENTE', 'Urgente')], default='NORMAL', max_length=10, verbose_name='Urgência')),
                ('observations', models.TextField(max_length=255, verbose_name='Observações')),
                ('status', models.CharField(choices=[('PENDING', 'Pendente'), ('APPROVED', 'Aprovada')], default='PENDING', max_length=15, verbose_name='Status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data da Requisição')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Ultima Atualização')),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='requests_made', to=settings.AUTH_USER_MODEL, verbose_name='Requisitante')),
                ('sector', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='requests_from_sector', to='core.sector', verbose_name='Setor')),
            ],
            options={
                'verbose_name': 'Requisição',
                'verbose_name_plural': 'Requisições',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RequestItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('item_requested', models.CharField(max_length=255, verbose_name='Item Solicitado')),
                ('quantify', models.PositiveIntegerField(verbose_name='Quantidade')),
                ('category', models.CharField(choices=[('INSUMO_PRODUCAO', 'Insumo(Produção)'), ('EMBALAGENS', 'Embalagens'), ('LIMPEZA', 'Limpeza'), ('AREA_DE_VENDA', 'Area de venda'), ('ADIMINISTRATIVO', 'Administrativo')], max_length=50, verbose_name='Categoria')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='core.request', verbose_name='Requisição')),
            ],
            options={
                'verbose_name': 'Item da Requisição',
                'verbose_name_plural': 'Itens da Requisição',
                'ordering': ['created_at'],
            },
        ),
    ]
