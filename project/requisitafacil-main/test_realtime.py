#!/usr/bin/env python3
"""
Script para testar a comunica√ß√£o em tempo real entre Django e FastAPI
"""
import requests
import json
import time

def test_fastapi_connection():
    """Testa se o FastAPI est√° respondendo"""
    try:
        response = requests.get('http://localhost:8001/docs')
        if response.status_code == 200:
            print("‚úÖ FastAPI est√° rodando na porta 8001")
            return True
        else:
            print(f"‚ùå FastAPI retornou status {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå N√£o foi poss√≠vel conectar ao FastAPI na porta 8001")
        print("üí° Certifique-se de que o servidor FastAPI est√° rodando:")
        print("   python -m uvicorn realtime_server:app --host 0.0.0.0 --port 8001")
        return False

def test_django_connection():
    """Testa se o Django est√° respondendo"""
    try:
        response = requests.get('http://localhost:8000/')
        if response.status_code in [200, 302]:  # 302 √© redirect para login
            print("‚úÖ Django est√° rodando na porta 8000")
            return True
        else:
            print(f"‚ùå Django retornou status {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå N√£o foi poss√≠vel conectar ao Django na porta 8000")
        print("üí° Certifique-se de que o servidor Django est√° rodando:")
        print("   python manage.py runserver 8000")
        return False

def test_notification():
    """Testa se a notifica√ß√£o est√° funcionando"""
    try:
        # Simula uma notifica√ß√£o do Django para o FastAPI
        response = requests.post('http://localhost:8001/notify', 
                               json={"action": "test", "message": "Teste de notifica√ß√£o"})
        if response.status_code == 200:
            print("‚úÖ Notifica√ß√£o enviada com sucesso para o FastAPI")
            return True
        else:
            print(f"‚ùå Erro ao enviar notifica√ß√£o: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå N√£o foi poss√≠vel enviar notifica√ß√£o para o FastAPI")
        return False

def main():
    print("üß™ Testando comunica√ß√£o em tempo real...")
    print("=" * 50)
    
    # Testar conex√µes
    fastapi_ok = test_fastapi_connection()
    django_ok = test_django_connection()
    
    if fastapi_ok and django_ok:
        print("\n‚úÖ Ambos os servidores est√£o rodando!")
        
        # Testar notifica√ß√£o
        if test_notification():
            print("\nüéâ Sistema de tempo real funcionando corretamente!")
            print("\nüí° Agora quando voc√™ criar ou atualizar requisi√ß√µes,")
            print("   o painel deve atualizar automaticamente!")
        else:
            print("\n‚ö†Ô∏è  Sistema de notifica√ß√£o n√£o est√° funcionando")
    else:
        print("\n‚ùå Um ou ambos os servidores n√£o est√£o rodando")
        print("\nüîß Para iniciar ambos os servidores, execute:")
        print("   python start_servers.py")

if __name__ == "__main__":
    main() 